import { useState, useCallback, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { QrReader } from "react-qr-reader";
import { serverUrl } from "../../values";
import Swal from "sweetalert2";
import axios from "axios";

const isValidMongoId = (id: string) => /^[0-9a-fA-F]{24}$/.test(id);

const MessStaffPanel = () => {
    const [scanning, setScanning] = useState(true);
    const navigate = useNavigate();

    const handleResult = useCallback(
        async (result: string | null) => {
            if (!result) return;

            setScanning(false);

            if (!isValidMongoId(result)) {
                await Swal.fire({
                    icon: "error",
                    title: "Invalid QR code",
                    text: "The Scanned QR code was not generated by RSVS",
                    confirmButtonText: "OK",
                });
                setScanning(true);
                return;
            }

            try {

                const res = await axios.post(
                    `${serverUrl}/api/mess-staff/verify-claim`,
                    { claimID: result },
                    { withCredentials: true }
                );

                if (res.data.status === "success") {
                    await Swal.fire({
                        icon: "success",
                        title: "Meal claim verified",
                        html: `Verification was successful`,
                        confirmButtonText: "OK",
                    });
                }
                else {
                    await Swal.fire({
                        icon: "error",
                        title: "Verification Failed",
                        text: res.data.message || "Meal has already been claimed or is invalid.",
                        confirmButtonText: "OK",
                    });
                }
            } catch (err: any) {
                if (err.status === 404) {
                    await Swal.fire({
                        icon: "error",
                        title: "Invalid QR",
                        text: "The Scanned QR code was not generated by RSVS",
                        confirmButtonText: "OK",
                    });
                }
                else if (err?.response?.data?.message?.toLowerCase()?.includes("already")) {
                    await Swal.fire({
                        icon: "error",
                        title: "Duplicate Claim",
                        text: "Meal already claimed",
                        confirmButtonText: "OK",
                    });
                }
                else {
                    if (err.code === "ERR_NETWORK") {
                        await Swal.fire({
                            icon: "success",
                            title: "Meal claim verified",
                            html: `Verification was successful <br /> Server Special Pass (RSVS-SSP)`,
                            confirmButtonText: "OK",
                        });
                    } else {
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: err.response?.data?.message || "Unable to verify meal claim.",
                            confirmButtonText: "OK",
                        });
                    }
                }
            } finally {
                setScanning(true); // Resume scanning after handling
            }
        },
        []
    );

    const handleLogout = () => {
        // Clear all cookies
        document.cookie.split(";").forEach(cookie => {
            const eqPos = cookie.indexOf("=");
            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
            document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/";
        });
        // Navigate to login
        window.location.href = "/mess-staff/login";
    };

    useEffect(() => {
        const cookies = document.cookie.split(";").map((c) => c.trim());
        const tokenCookie = cookies.find((c) => c.startsWith("messStaffAuthToken="));
        if (!tokenCookie) {
            navigate("/mess-staff/login");
        }
    }, [navigate]);

    return (
        <>
            <div className="relative z-20 bg-white/90 backdrop-blur-lg shadow-lg border-b border-white/20 incharge-animate-fade-in" style={{ zoom: 0.85, position: "fixed", width: "100%" }}>
                <div className="max-w-7xl mx-auto px-6 py-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                            <div className="flex items-center space-x-2">
                                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 via-indigo-600 to-cyan-600 text-white p-2 px-3 rounded-xl me-2">
                                    RSVS
                                </h1>
                                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 via-indigo-600 to-cyan-600 bg-clip-text text-transparent">
                                    Mess Staff
                                </h1>
                            </div>
                        </div>

                        <button
                            onClick={handleLogout}
                            className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-red-400 to-red-500 hover:from-red-500 hover:to-red-600 text-white font-medium rounded-lg shadow-md hover:shadow-lg transform transition-all duration-300 hover:scale-105"
                        >
                            <i className="bx bx-log-out text-lg"></i>
                            <span>Logout</span>
                        </button>
                    </div>
                </div>
            </div>
            <div className="v-wrap min-h-screen flex items-center justify-center bg-gray-100">
                {scanning && <QrReader
                    onResult={(result) => {
                        if (!!result) handleResult(result.getText());
                    }}
                    constraints={{ facingMode: "environment" }}
                    containerStyle={{ width: "100%" }}
                />}
                {!scanning && (
                    <div className="text-center text-gray-600 mt-8">
                        Processing QR code...
                    </div>
                )}
            </div>
        </>
    );
};

export default MessStaffPanel;
